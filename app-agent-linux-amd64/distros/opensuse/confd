#!/bin/sh
#
# Copyright (C) 2016 Yunify Inc.
#
# Script to manage confd service for OpenSUSE

### BEGIN INIT INFO
# Provides:        confd
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    1
# Short-Description: manage confd daemon
### END INIT INFO


PROG="confd"
PROG_PATH=/opt/qingcloud/app-agent
PROG_BIN=$PROG_PATH/bin/$PROG
PIDFILE=$PROG_PATH/run/$PROG.pid

test -x $PROG_BIN || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running

case "$1" in
    start)
        echo -n $"Starting $PROG server: "
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.

        # NOTE: startproc return 0, even if service is 
        # already running to match LSB spec.
        startproc -p $PIDFILE $PROG_BIN >> $PROG_PATH/log/$PROG.log 2>&1

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n $"Stopping $PROG server: "
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

        killproc -TERM -p $PIDFILE $PROG_BIN 

        # Remember status and be verbose
        rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    status)
        echo -n "Checking for Cron: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        checkproc $PROG_BIN
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac
rc_exit
